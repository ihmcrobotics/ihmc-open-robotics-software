plugins {
   id("us.ihmc.ihmc-build") version "0.20.1"
   id("us.ihmc.ihmc-ci") version "5.3"
   id("us.ihmc.ihmc-cd") version "1.14"
   id("us.ihmc.log-tools") version "0.3.1"
   id("us.ihmc.scs") version "0.4"
   id "org.hidetake.ssh" version "2.9.0"
   id "application"
}

ihmc {
   loadProductProperties("../product.properties")

   configureDependencyResolution()
   configurePublications()
}

mainDependencies {
   api("net.sf.trove4j:trove4j:3.0.3")
   api("com.martiansoftware:jsap:2.1")
   api("net.sourceforge.jmatio:jmatio:1.0")

   api("us.ihmc:euclid:0.12.2")
   api("us.ihmc:ihmc-yovariables:0.4.0")
   api("us.ihmc:ihmc-video-codecs:2.1.5")
   api("us.ihmc:ihmc-commons:0.26.6")
   api("us.ihmc:simulation-construction-set:0.14.0")
   api("us.ihmc:ihmc-javafx-toolkit:0.14.1")
   api("us.ihmc:ihmc-graphics-description:0.14.1")
   api("us.ihmc:ihmc-robot-description:0.14.1")
   api("us.ihmc:ihmc-model-file-loader:source")
   api("us.ihmc:ihmc-communication:source")
   api("us.ihmc:ihmc-java-toolkit:source")
   api("us.ihmc:ihmc-humanoid-robotics:source")
   api("us.ihmc:ihmc-robotics-toolkit:source")
   api("us.ihmc:ihmc-robot-data-logger:0.15.0")
}

testDependencies {
    api("us.ihmc:ihmc-robotics-toolkit-test:source")
}

mainClassName = hasProperty("mainClass") ? mainClass : "us.ihmc.robotDataVisualizer.visualizer.SCSVisualizer"

if (ihmc.isBuildRoot())
{
   task viewerStartScripts(type: CreateStartScripts) {
      outputDir = file("build/scripts")
      mainClassName = "us.ihmc.robotDataVisualizer.gui.GUICaptureViewer"
      applicationName = "IHMCGUICaptureViewer"
      classpath = project.configurations.runtime + jar.outputs.files
   }

   distributions {
      guiCaptureViewer {
         baseName = "IHMCGUICaptureViewer"
         contents {
            into("lib") {
               from project.configurations.runtime + jar.outputs.files
            }

            into("bin") {
               from viewerStartScripts
               include "IHMCGUICaptureViewer*"
            }
         }
      }
   }

   task setupDeployViewerRemote {
      doLast {
         def deployViewerUserValue = project.hasProperty("deployViewerUser") ? project.deployViewerUser : "invalid"
         def deployViewerPasswordValue = project.hasProperty("deployViewerPassword") ? project.deployViewerPassword : "invalid"
         def deployViewerHostValue = project.hasProperty("deployViewerHost") ? project.deployViewerHost : "invalid"

         remotes.create("deployViewerTarget") {
            host = deployViewerHostValue
            user = deployViewerUserValue
            password = deployViewerPasswordValue
            knownHosts = allowAnyHosts
         }
      }
   }

   task deployViewer(dependsOn: [guiCaptureViewerDistTar, setupDeployViewerRemote]) {
      doLast {
         ssh.run {
            session(remotes.deployViewerTarget) {
               project.logger.lifecycle("Copying GUI Capture Viewer distribution tarball to remote host")
               def distTarFile = guiCaptureViewerDistTar.outputs.files.singleFile
               put from: distTarFile, into: "."

               project.logger.lifecycle("Untarring distribution on remote host")
               execute "tar xf ./${distTarFile.name}"
               project.logger.lifecycle("Removing tarball from remote host")
               execute "rm -f ./${distTarFile.name}"
               project.logger.lifecycle("Moving GUI Capture Viewer distribution in to place")
               execute "mv ./${distTarFile.name.replace(".tar", "")} IHMCGUICaptureViewer"
               project.logger.lifecycle("GUI Capture Viewer deployment to remote host complete!")
            }
         }
      }
   }
}
