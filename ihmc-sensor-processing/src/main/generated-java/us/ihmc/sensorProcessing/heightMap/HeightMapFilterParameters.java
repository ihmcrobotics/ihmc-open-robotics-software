package us.ihmc.sensorProcessing.heightMap;

import us.ihmc.tools.property.*;

/**
 * The JSON file for this property set is located here:
 * ihmc-sensor-processing/src/main/resources/us/ihmc/sensorProcessing/heightMap/HeightMapFilterParameters.json
 *
 * This class was auto generated. Property attributes must be edited in the JSON file,
 * after which this class should be regenerated by running the main. This class uses
 * the generator to assist in the addition, removal, and modification of property keys.
 * It is permissible to forgo these benefits and abandon the generator, in which case
 * you should also move it from the generated-java folder to the java folder.
 *
 * If the constant paths have changed, change them in this file and run the main to regenerate.
 */
public class HeightMapFilterParameters extends StoredPropertySet implements HeightMapFilterParametersBasics
{
   public static final String DIRECTORY_NAME_TO_ASSUME_PRESENT = "ihmc-open-robotics-software";
   public static final String SUBSEQUENT_PATH_TO_RESOURCE_FOLDER = "ihmc-sensor-processing/src/main/resources";
   public static final String SUBSEQUENT_PATH_TO_JAVA_FOLDER = "ihmc-sensor-processing/src/main/generated-java";

   public static final StoredPropertyKeyList keys = new StoredPropertyKeyList();

   /**
    * If a single cell is higher than all its neighbors by this amount, that cell is
    * labeled an outlier and removed.
    */
   public static final DoubleStoredPropertyKey outlierCellHeightResetEpsilon = keys.addDoubleKey("Outlier cell height reset epsilon");
   /**
    * The number of occupied neighbor cells to allow determining if a cell is an
    * outlier
    */
   public static final IntegerStoredPropertyKey minNeighborsToToDetermineOutliers = keys.addIntegerKey("Min neighbors to to determine outliers");
   /**
    * Number of cells in a direction to search for data to fill in holes.
    */
   public static final IntegerStoredPropertyKey holeProximityThreshold = keys.addIntegerKey("Hole proximity threshold");
   public static final BooleanStoredPropertyKey estimateGroundHeight = keys.addBooleanKey("Estimate ground height");
   public static final BooleanStoredPropertyKey fillHoles = keys.addBooleanKey("Fill holes");
   public static final BooleanStoredPropertyKey removeOutlierCells = keys.addBooleanKey("Remove outlier cells");

   /**
    * Loads this property set.
    */
   public HeightMapFilterParameters()
   {
      this("");
   }

   /**
    * Loads an alternate version of this property set in the same folder.
    */
   public HeightMapFilterParameters(String versionSpecifier)
   {
      this(HeightMapFilterParameters.class, DIRECTORY_NAME_TO_ASSUME_PRESENT, SUBSEQUENT_PATH_TO_RESOURCE_FOLDER, versionSpecifier);
   }

   /**
    * Loads an alternate version of this property set in other folders.
    */
   public HeightMapFilterParameters(Class<?> classForLoading, String directoryNameToAssumePresent, String subsequentPathToResourceFolder, String versionSuffix)
   {
      super(keys, classForLoading, HeightMapFilterParameters.class, directoryNameToAssumePresent, subsequentPathToResourceFolder, versionSuffix);
      load();
   }

   public HeightMapFilterParameters(StoredPropertySetReadOnly other)
   {
      super(keys, HeightMapFilterParameters.class, DIRECTORY_NAME_TO_ASSUME_PRESENT, SUBSEQUENT_PATH_TO_RESOURCE_FOLDER, other.getCurrentVersionSuffix());
      set(other);
   }

   public static void main(String[] args)
   {
      StoredPropertySet parameters = new StoredPropertySet(keys,
                                                           HeightMapFilterParameters.class,
                                                           DIRECTORY_NAME_TO_ASSUME_PRESENT,
                                                           SUBSEQUENT_PATH_TO_RESOURCE_FOLDER);
      parameters.generateJavaFiles(SUBSEQUENT_PATH_TO_JAVA_FOLDER);
   }
}
