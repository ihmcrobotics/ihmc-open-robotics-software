buildscript {
   repositories {
      maven {
         url "http://dl.bintray.com/ihmcrobotics/maven-release"
      }
      maven {
         url "http://dl.bintray.com/ihmcrobotics/maven-vendor"
      }
   }
   dependencies {
      classpath group: 'us.ihmc', name: 'ihmc-pub-sub-generator', version: '0.6.11-alpha'
   }
}

buildscript {
   repositories {
      maven { url "https://plugins.gradle.org/m2/" }
      mavenLocal()
   }
   dependencies {
      classpath "us.ihmc:ihmc-build:0.13.3"
      classpath "org.hidetake:gradle-ssh-plugin:2.9.0"
   }
}

apply plugin: "application"
apply plugin: "org.hidetake.ssh"
apply plugin: "us.ihmc.ihmc-build"

import org.gradle.api.GradleException

ihmc {
   loadProductProperties("../product.properties")

   configureDependencyResolution()
   resourceDirectory("main", "idl")
   configurePublications()
}

testSuites {
   def prefix = "LIBS-IHMCOPENROBOTICSSOFTWARE"
   bambooPlanKeys = [prefix + "FAST", prefix + "INDEVELOPMENT", prefix + "UI", prefix + "VIDEO"]
}

sourceSets.main.java.srcDirs += ['src/main/java-generated']

mainDependencies {
   compile group: 'us.ihmc', name: 'euclid-core', version: '0.5.1'
   compile group: 'us.ihmc', name: 'ihmc-yovariables', version: '0.3.1'
   compile group: 'com.google.protobuf', name: 'protobuf-java', version: '2.6.1'
   compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
   compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
   compile group: 'com.google.guava', name: 'guava', version: '18.0'
   compile group: 'us.ihmc', name: 'IHMCVideoCodecs', version: '2.1.3'
   compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.8'
   compile group: 'us.ihmc', name: 'IHMCJavaDecklinkCapture', version: '0.2'
   compile group: "commons-io", name: "commons-io", version: "2.6"
   compile group: 'org.tukaani', name: 'xz', version: '1.5'
   compile group: 'us.ihmc', name: 'ihmc-pub-sub', version: '0.6.11-alpha'
   compile group: 'us.ihmc', name: 'ihmc-pub-sub-serializers-extra', version: '0.6.11-alpha'
   compile group: 'org.xerial.snappy', name: 'snappy-java', version: '1.1.1-M1'
   compile group: 'net.jpountz.lz4', name: 'lz4', version: '1.3.0'
   compile group: "us.ihmc", name: "ihmc-commons", version: "0.19.0"
   compile group: "us.ihmc", name: "ihmc-model-file-loader", version: "source"
   compile group: "us.ihmc", name: "ihmc-robotics-toolkit", version: "source"
   compile group: "us.ihmc", name: "ihmc-graphics-description", version: "0.12.1"
   compile group: "us.ihmc", name: "ihmc-robot-description", version: "source"
}

testDependencies {
   compile group: "junit", name: "junit", version: "4.12"
   compile group: "us.ihmc", name: "ihmc-commons-testing", version: "0.19.0"
}

mainClassName = hasProperty('mainClass') ? mainClass : "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher"

if (ihmc.isBuildRoot())
{
   task loggerStartScripts(type: CreateStartScripts) {
      outputDir = file("build/scripts")
      mainClassName = "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher"
      applicationName = "IHMCLogger"
      classpath = project.configurations.runtime + jar.outputs.files
   }

   task generateMessages(type: us.ihmc.idl.generator.IDLGeneratorTask) {
      idlFiles = fileTree(dir: 'src/main/idl')
      includeDirs = files(".")
      targetDirectory = file("src/main/java-generated")
      packagePrefix = ""
   }

   compileJava.dependsOn generateMessages

   distributions {
      logger {
         baseName = "IHMCLogger"
         contents {
            into('lib') {
               from project.configurations.runtime + jar.outputs.files
            }

            into('bin') {
               from loggerStartScripts
               include "IHMCLogger*"
            }
         }
      }
   }

   task setupDeployLoggerRemote {
      doLast {
         remotes.create('deployLoggerTarget') {
            host = deployLoggerHost
            user = deployLoggerUser
            password = deployLoggerPassword
            knownHosts = allowAnyHosts
         }
      }
   }

   task deployLogger(dependsOn: [loggerDistTar, setupDeployLoggerRemote]) {
      doLast {
         ssh.run {
            session(remotes.deployLoggerTarget) {
               project.logger.lifecycle("Copying Logger distribution tarball to remote host")
               def distTarFile = loggerDistTar.outputs.files.singleFile
               put from: distTarFile, into: "."

               project.logger.lifecycle("Untarring distribution on remote host")
               execute "tar xf ./${distTarFile.name}"
               project.logger.lifecycle("Removing tarball from remote host")
               execute "rm -f ./${distTarFile.name}"
               project.logger.lifecycle("Removing old version")
               execute "rm -rf IHMCLogger"
               project.logger.lifecycle("Moving Logger distribution in to place")
               execute "mv ./${distTarFile.name.replace(".tar", "")} IHMCLogger"
               project.logger.lifecycle("Logger deployment to remote host complete!")
            }
         }
      }
   }

   task checkThatDistributionDoesntAlreadyExist(type: Exec) {
      def distTarFile = loggerDistTar.outputs.files.singleFile
      workingDir project.projectDir
      executable 'curl'
      args = ["--write-out", "%{http_code}", "--silent", "--output", "/dev/null", "--head", "https://dl.bintray.com/ihmcrobotics/distributions/${distTarFile.name}"]
      standardOutput = new ByteArrayOutputStream();

      doLast {
         execResult.assertNormalExitValue()
         def output = standardOutput.toString()
         if (output.equals("200"))
         {
            throw new GradleException("Distribution ${distTarFile.name} already exists on Bintray. Distributions versions should not be overwritten. Did you mean to release a new version or hotfix?")
         }
      }
   }

   task publishLoggerDistributionToBintray(type: Exec, dependsOn: [checkThatDistributionDoesntAlreadyExist, loggerDistTar]) {
      def distTarFile = loggerDistTar.outputs.files.singleFile

      workingDir project.projectDir
      executable 'curl'
      args = ["--write-out", "%{http_code}", "--silent", "--output", "/dev/null", "-T", distTarFile.canonicalPath, "-u${bintray_user}:${bintray_key}", "https://api.bintray.com/content/ihmcrobotics/distributions/IHMCLogger/${project.version}/${distTarFile.name}?publish=1"]
      standardOutput = new ByteArrayOutputStream();

      doLast {
         execResult.assertNormalExitValue()
         def output = standardOutput.toString()
         if (!output.equals("201"))
         {
            throw new GradleException("Upload failed! HTTP Response code: ${output}.")
         }
      }
   }
}