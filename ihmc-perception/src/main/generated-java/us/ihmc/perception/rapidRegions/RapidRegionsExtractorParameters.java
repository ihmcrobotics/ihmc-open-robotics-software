package us.ihmc.perception.rapidRegions;

import us.ihmc.tools.property.*;

/**
 * The JSON file for this property set is located here:
 * ihmc-perception/src/main/resources/us/ihmc/perception/rapidRegions/RapidRegionsExtractorParameters.json
 *
 * This class was auto generated. Property attributes must be edited in the JSON file,
 * after which this class should be regenerated by running the main. This class uses
 * the generator to assist in the addition, removal, and modification of property keys.
 * It is permissible to forgo these benefits and abandon the generator, in which case
 * you should also move it from the generated-java folder to the java folder.
 *
 * If the constant paths have changed, change them in this file and run the main to regenerate.
 */
public class RapidRegionsExtractorParameters extends StoredPropertySet implements RapidRegionsExtractorParametersBasics
{
   public static final String DIRECTORY_NAME_TO_ASSUME_PRESENT = "ihmc-open-robotics-software";
   public static final String SUBSEQUENT_PATH_TO_RESOURCE_FOLDER = "ihmc-perception/src/main/resources";
   public static final String SUBSEQUENT_PATH_TO_JAVA_FOLDER = "ihmc-perception/src/main/generated-java";

   public static final StoredPropertyKeyList keys = new StoredPropertyKeyList();

   public static final IntegerStoredPropertyKey normalPackRange = keys.addIntegerKey("Normal pack range");
   public static final IntegerStoredPropertyKey centroidPackRange = keys.addIntegerKey("Centroid pack range");
   public static final IntegerStoredPropertyKey mergeRange = keys.addIntegerKey("Merge range");
   public static final DoubleStoredPropertyKey mergeOrthogonalThreshold = keys.addDoubleKey("Merge orthogonal threshold");
   public static final DoubleStoredPropertyKey mergeDistanceThreshold = keys.addDoubleKey("Merge distance threshold");
   public static final DoubleStoredPropertyKey mergeAngularThreshold = keys.addDoubleKey("Merge angular threshold");
   public static final IntegerStoredPropertyKey connectionThreshold = keys.addIntegerKey("Connection threshold");
   public static final IntegerStoredPropertyKey patchSize = keys.addIntegerKey("Patch size");
   public static final IntegerStoredPropertyKey deadPixelFilterPatchSize = keys.addIntegerKey("Dead pixel filter patch size");
   public static final DoubleStoredPropertyKey focalLengthXPixels = keys.addDoubleKey("Focal length X pixels");
   public static final DoubleStoredPropertyKey focalLengthYPixels = keys.addDoubleKey("Focal length Y pixels");
   public static final DoubleStoredPropertyKey principalOffsetXPixels = keys.addDoubleKey("Principal offset X pixels");
   public static final DoubleStoredPropertyKey principalOffsetYPixels = keys.addDoubleKey("Principal offset Y pixels");
   public static final BooleanStoredPropertyKey useFilteredImage = keys.addBooleanKey("Use filtered image");
   public static final BooleanStoredPropertyKey useSVDNormals = keys.addBooleanKey("Use SVD normals");
   public static final IntegerStoredPropertyKey svdReductionFactor = keys.addIntegerKey("SVD reduction factor");
   public static final IntegerStoredPropertyKey internalSearchDepthLimit = keys.addIntegerKey("Internal search depth limit");
   public static final IntegerStoredPropertyKey boundarySearchDepthLimit = keys.addIntegerKey("Boundary search depth limit");
   public static final IntegerStoredPropertyKey regionMinPatches = keys.addIntegerKey("Region min patches");
   public static final IntegerStoredPropertyKey boundaryMinPatches = keys.addIntegerKey("Boundary min patches");
   public static final DoubleStoredPropertyKey regionGrowthFactor = keys.addDoubleKey("Region growth factor");

   /**
    * Loads this property set.
    */
   public RapidRegionsExtractorParameters()
   {
      this("");
   }

   /**
    * Loads an alternate version of this property set in the same folder.
    */
   public RapidRegionsExtractorParameters(String versionSpecifier)
   {
      this(RapidRegionsExtractorParameters.class, DIRECTORY_NAME_TO_ASSUME_PRESENT, SUBSEQUENT_PATH_TO_RESOURCE_FOLDER, versionSpecifier);
   }

   /**
    * Loads an alternate version of this property set in other folders.
    */
   public RapidRegionsExtractorParameters(Class<?> classForLoading, String directoryNameToAssumePresent, String subsequentPathToResourceFolder, String versionSuffix)
   {
      super(keys, classForLoading, RapidRegionsExtractorParameters.class, directoryNameToAssumePresent, subsequentPathToResourceFolder, versionSuffix);
      load();
   }

   public RapidRegionsExtractorParameters(StoredPropertySetReadOnly other)
   {
      super(keys, RapidRegionsExtractorParameters.class, DIRECTORY_NAME_TO_ASSUME_PRESENT, SUBSEQUENT_PATH_TO_RESOURCE_FOLDER, other.getCurrentVersionSuffix());
      set(other);
   }

   public static void main(String[] args)
   {
      StoredPropertySet parameters = new StoredPropertySet(keys,
                                                           RapidRegionsExtractorParameters.class,
                                                           DIRECTORY_NAME_TO_ASSUME_PRESENT,
                                                           SUBSEQUENT_PATH_TO_RESOURCE_FOLDER);
      parameters.generateJavaFiles(SUBSEQUENT_PATH_TO_JAVA_FOLDER);
   }
}
