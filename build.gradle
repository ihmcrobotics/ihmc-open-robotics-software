buildscript {
    repositories {
      jcenter()
   }

   dependencies {
      classpath 'org.ajoberstar:gradle-git:1.4.0-rc.1'
   }
}

apply plugin: 'maven-publish'

import org.ajoberstar.grgit.*

project.ext.repo = Grgit.open(projectDir)

version = '0.9.0'

project.ext.fullVersion = version
project.ext.vcsUrl = "https://github.com/ihmcrobotics/ihmc-open-robotics-software"
project.ext.snapshotCounter = 1
project.ext.releaseCandidateCounter = 1

getDate()

if (buildType.equals("NIGHTLY")) {
   project.ext.fullVersion = version += "-NIGHTLY+date.${project.ext.date}.rev.${repo.head().abbreviatedId}"
}

if (buildType.equals("LOCAL")) {
   project.ext.fullVersion = "LOCAL"
}

if (buildType.equals("SNAPSHOT")) {
   project.ext.fullVersion = version += "-SNAPSHOT${project.ext.snapshotCounter}.rev.${repo.head().abbreviatedId}"
}

if (buildType.equals("RC")) {
   project.ext.fullVersion = version += "-RC${project.ext.releaseCandidateCounter}.rev.${repo.head().abbreviatedId}"
}

// if (buildType.equals("RELEASE")) {
//    if (!project.ext.repo.branch.current.name.equals("master")) {
//       throw new GradleException("Cannot make RELEASE build from branch \"${project.ext.repo.branch.current.name}\", it is not the branch used for stable releases!")
//    }
// }

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "http://artifactory.ihmc.us/artifactory/thirdparty/"
    }
}

task performRelease(type: GradleBuild) {
   if (!buildType.equals("RELEASE")) {
      return
   }
   buildFile "build.gradle"
   startParameter gradle.startParameter
   tasks = ["bintrayUpload", ":IHMCRobotDataLogger:publishLoggerDistributionToBintray"]
}

task publishAllToMavenLocal(type: GradleBuild) {
   buildFile "build.gradle"
   def allTasks = new ArrayList<String>()

   subprojects.each { subproject ->
      allTasks.add(":" + subproject.name + ":publishToMavenLocal")
   }

   tasks = allTasks
}

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
   if (graph.hasTask(publishAllToMavenLocal)) {
      buildType = "LOCAL"
      project.ext.fullVersion = "LOCAL"

      subprojects.each { subproject ->
         subproject.ext.fullVersion = "LOCAL"
      }
   }

   if (graph.hasTask(performRelease)) {
      if (!buildType.equals("RELEASE")) {
         throw new GradleException("Cannot perform release unless -PbuildType=RELEASE")
      }
   }
}

subprojects { subproject ->

   apply plugin: 'maven-publish'
   apply plugin: 'java'
   
   subproject.ext {
      getOpenRoboticsSoftwareProject = {
         if (subproject.getParent().name.equals(rootProject.name)) {
            return rootProject
         } else {
            return project(':IHMCOpenRoboticsSoftware')
         }
      }

      getOpenRoboticsSoftwareGradlePath = {
         if (subproject.getParent().name.equals(rootProject.name)) {
            return ""
         } else {
            return ":IHMCOpenRoboticsSoftware"
         }
      }
   }

   jar {
      from(project.projectDir) {
         include 'LICENSE*txt'
      }
   }

   task sourceJar(type: Jar) {
      from sourceSets.main.allJava
   }

   publishing {
      publications {
         mavenJava(MavenPublication) {

            groupId 'us.ihmc'
            artifactId "${project.name}"
            version "${project.ext.fullVersion}"

            from components.java

            artifact sourceJar {
               classifier "sources"
            }

            pom.withXml {
               def licenseNode = asNode().appendNode('licenses').appendNode('license')
               licenseNode.appendNode('name', project.ext.licenseName)
               licenseNode.appendNode('url', project.ext.licenseURL)
            }
         }
      }
   }

   task testFast(type: Test) {
      ignoreFailures true
      include "**/*FastTestSuite.class"
   }

   task testSlow(type: Test) {
      ignoreFailures true
      include "**/*SlowTestSuite.class"
   }
}

def getDate() {
   def date = new Date()
   def formattedDate = date.format('yyyy.MM.dd')
   project.ext.date = formattedDate
}
