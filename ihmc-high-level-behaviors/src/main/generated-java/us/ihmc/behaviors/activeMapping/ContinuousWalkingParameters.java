package us.ihmc.behaviors.activeMapping;

import us.ihmc.tools.property.*;

/**
 * The JSON file for this property set is located here:
 * ihmc-high-level-behaviors/src/main/resources/us/ihmc/behaviors/activeMapping/ContinuousPlanningParameters.json
 *
 * This class was auto generated. Property attributes must be edited in the JSON file,
 * after which this class should be regenerated by running the main. This class uses
 * the generator to assist in the addition, removal, and modification of property keys.
 * It is permissible to forgo these benefits and abandon the generator, in which case
 * you should also move it from the generated-java folder to the java folder.
 *
 * If the constant paths have changed, change them in this file and run the main to regenerate.
 */
public class ContinuousWalkingParameters extends StoredPropertySet implements ContinuousWalkingParametersBasics
{
   public static final StoredPropertyKeyList keys = new StoredPropertyKeyList();

   public static final BooleanStoredPropertyKey activeMapping = keys.addBooleanKey("Active mapping");
   public static final BooleanStoredPropertyKey clearEntireControllerQueue = keys.addBooleanKey("Clear entire controller queue");
   public static final IntegerStoredPropertyKey numberOfStepsToSend = keys.addIntegerKey("Number of steps to send");
   public static final IntegerStoredPropertyKey maxStepsToHoldInControllerQueue = keys.addIntegerKey("Max steps to hold in controller queue");
   public static final DoubleStoredPropertyKey goalPoseForwardDistance = keys.addDoubleKey("Goal pose forward distance");
   public static final DoubleStoredPropertyKey goalPoseUpDistance = keys.addDoubleKey("Goal pose up distance");
   public static final DoubleStoredPropertyKey swingTime = keys.addDoubleKey("Swing time");
   public static final DoubleStoredPropertyKey transferTime = keys.addDoubleKey("Transfer time");
   public static final DoubleStoredPropertyKey planningWithReferenceTimeout = keys.addDoubleKey("Planning with reference timeout");
   public static final DoubleStoredPropertyKey initialPlanningTimeout = keys.addDoubleKey("Initial planning timeout");

   /**
    * Loads this property set.
    */
   public ContinuousWalkingParameters()
   {
      this("");
   }

   /**
    * Loads an alternate version of this property set in the same folder.
    */
   public ContinuousWalkingParameters(String versionSuffix)
   {
      this(ContinuousWalkingParameters.class, versionSuffix);
   }

   /**
    * Loads an alternate version of this property set in other folders.
    */
   public ContinuousWalkingParameters(Class<?> classForLoading, String versionSuffix)
   {
      super(keys, classForLoading, ContinuousWalkingParameters.class, versionSuffix);
      load();
   }

   public ContinuousWalkingParameters(StoredPropertySetReadOnly other)
   {
      super(keys, ContinuousWalkingParameters.class, other.getCurrentVersionSuffix());
      set(other);
   }

   public static void main(String[] args)
   {
      StoredPropertySet parameters = new StoredPropertySet(keys, ContinuousWalkingParameters.class);
      parameters.generateJavaFiles();
   }
}
