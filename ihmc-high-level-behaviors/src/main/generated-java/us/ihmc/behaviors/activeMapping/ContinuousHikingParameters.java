package us.ihmc.behaviors.activeMapping;

import us.ihmc.tools.property.BooleanStoredPropertyKey;
import us.ihmc.tools.property.DoubleStoredPropertyKey;
import us.ihmc.tools.property.IntegerStoredPropertyKey;
import us.ihmc.tools.property.StoredPropertyKeyList;
import us.ihmc.tools.property.StoredPropertySet;
import us.ihmc.tools.property.StoredPropertySetReadOnly;

/**
 * The JSON file for this property set is located here:
 * ihmc-high-level-behaviors/src/main/resources/us/ihmc/behaviors/activeMapping/ContinuousWalkingParameters.json
 *
 * This class was auto generated. Property attributes must be edited in the JSON file,
 * after which this class should be regenerated by running the main. This class uses
 * the generator to assist in the addition, removal, and modification of property keys.
 * It is permissible to forgo these benefits and abandon the generator, in which case
 * you should also move it from the generated-java folder to the java folder.
 *
 * If the constant paths have changed, change them in this file and run the main to regenerate.
 */
public class ContinuousHikingParameters extends StoredPropertySet implements ContinuousHikingParametersBasics
{
   public static final StoredPropertyKeyList keys = new StoredPropertyKeyList();

   public static final BooleanStoredPropertyKey enableContinuousWalking = keys.addBooleanKey("Enable continuous walking");
   public static final BooleanStoredPropertyKey shortcutIsPressed = keys.addBooleanKey("Shortcut is pressed");
   public static final BooleanStoredPropertyKey stepPublisherEnabled = keys.addBooleanKey("Step publisher enabled");
   public static final BooleanStoredPropertyKey overrideEntireQueueEachStep = keys.addBooleanKey("Override entire queue each step");
   public static final IntegerStoredPropertyKey numberOfStepsToSend = keys.addIntegerKey("Number of steps to send");
   public static final DoubleStoredPropertyKey goalPoseForwardDistance = keys.addDoubleKey("Goal pose forward distance");
   public static final DoubleStoredPropertyKey goalPoseUpDistance = keys.addDoubleKey("Goal pose up distance");
   public static final DoubleStoredPropertyKey swingTime = keys.addDoubleKey("Swing time");
   public static final DoubleStoredPropertyKey transferTime = keys.addDoubleKey("Transfer time");
   public static final DoubleStoredPropertyKey plannerTimeoutFraction = keys.addDoubleKey("Planner timeout fraction");
   public static final DoubleStoredPropertyKey planningWithoutReferenceTimeout = keys.addDoubleKey("Planning without reference timeout");
   public static final BooleanStoredPropertyKey logFootstepPlans = keys.addBooleanKey("Log footstep plans");
   public static final BooleanStoredPropertyKey defaultOperatingMode = keys.addBooleanKey("Default operating mode");
   public static final BooleanStoredPropertyKey disableUpdatingHeightMap = keys.addBooleanKey("Disable updating height map");

   /**
    * Loads this property set.
    */
   public ContinuousHikingParameters()
   {
      this("");
   }

   /**
    * Loads an alternate version of this property set in the same folder.
    */
   public ContinuousHikingParameters(String versionSuffix)
   {
      this(ContinuousHikingParameters.class, versionSuffix);
   }

   /**
    * Loads an alternate version of this property set in other folders.
    */
   public ContinuousHikingParameters(Class<?> classForLoading, String versionSuffix)
   {
      super(keys, classForLoading, ContinuousHikingParameters.class, versionSuffix);
      load();
   }

   public ContinuousHikingParameters(StoredPropertySetReadOnly other)
   {
      super(keys, ContinuousHikingParameters.class, other.getCurrentVersionSuffix());
      set(other);
   }

   public static void main(String[] args)
   {
      StoredPropertySet parameters = new StoredPropertySet(keys, ContinuousHikingParameters.class);
      parameters.generateJavaFiles();
   }
}
