package us.ihmc.perception;

import us.ihmc.tools.property.*;

/**
 * The JSON file for this property set is located here:
 * ihmc-high-level-behaviors/src/main/resources/us/ihmc/perception/IterativeClosestPointParameters.json
 *
 * This class was auto generated. Property attributes must be edited in the JSON file,
 * after which this class should be regenerated by running the main. This class uses
 * the generator to assist in the addition, removal, and modification of property keys.
 * It is permissible to forgo these benefits and abandon the generator, in which case
 * you should also move it from the generated-java folder to the java folder.
 *
 * If the constant paths have changed, change them in this file and run the main to regenerate.
 */
public class IterativeClosestPointParameters extends StoredPropertySet implements IterativeClosestPointParametersBasics
{
   public static final StoredPropertyKeyList keys = new StoredPropertyKeyList();

   public static final BooleanStoredPropertyKey ignoreCorrespondencesOnEdges = keys.addBooleanKey("Ignore correspondences on edges");
   /**
    * This is the number of corresponding points the algorithm attempts to use when
    * fitting the point clouds.
    */
   public static final IntegerStoredPropertyKey correspondencesToUse = keys.addIntegerKey("Correspondences to use");
   /**
    * This is the minimum number of corresponding points the algorithm needs to run.
    */
   public static final IntegerStoredPropertyKey minimumCorrespondences = keys.addIntegerKey("Minimum correspondences");
   public static final BooleanStoredPropertyKey computeObjectPoseWithTrack = keys.addBooleanKey("Compute object pose with track");
   public static final BooleanStoredPropertyKey segmentPointCloudWithObjectShape = keys.addBooleanKey("Segment point cloud with object shape");
   public static final DoubleStoredPropertyKey imageSegmentationRadius = keys.addDoubleKey("Image segmentation radius");
   public static final BooleanStoredPropertyKey prioritizeCorrespondencesByDistanceInsteadOfRandom = keys.addBooleanKey("Prioritize correspondences by distance instead of random");
   public static final DoubleStoredPropertyKey iterationTransformDiscountFactor = keys.addDoubleKey("Iteration transform discount factor");
   /**
    * The higher this frequency, the more the result will bias towards the incoming
    * measurement.
    */
   public static final DoubleStoredPropertyKey observationPoseFusingFrequency = keys.addDoubleKey("Observation pose fusing frequency");
   /**
    * The higher this frequency, the more the resulting velocity will bias towards the
    * new velocity
    */
   public static final DoubleStoredPropertyKey observationVelocityFusingFrequency = keys.addDoubleKey("Observation velocity fusing frequency");

   /**
    * Loads this property set.
    */
   public IterativeClosestPointParameters()
   {
      this("");
   }

   /**
    * Loads an alternate version of this property set in the same folder.
    */
   public IterativeClosestPointParameters(String versionSuffix)
   {
      this(IterativeClosestPointParameters.class, versionSuffix);
   }

   /**
    * Loads an alternate version of this property set in other folders.
    */
   public IterativeClosestPointParameters(Class<?> classForLoading, String versionSuffix)
   {
      super(keys, classForLoading, IterativeClosestPointParameters.class, versionSuffix);
      load();
   }

   public IterativeClosestPointParameters(StoredPropertySetReadOnly other)
   {
      super(keys, IterativeClosestPointParameters.class, other.getCurrentVersionSuffix());
      set(other);
   }

   public static void main(String[] args)
   {
      StoredPropertySet parameters = new StoredPropertySet(keys, IterativeClosestPointParameters.class);
      parameters.generateJavaFiles();
   }
}
