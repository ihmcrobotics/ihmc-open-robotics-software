// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package us.ihmc.mpc.mpcWrapper;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class MPCWrapper extends us.ihmc.mpc.mpcWrapper.presets.MPCWrapperInfoMapper {
    static { Loader.load(); }

// Parsed from include/MPCExternal.h


// #include "hpipm-cpp/hpipm-cpp.hpp"

// #include <chrono>
// #include <iostream>
// #include <vector>

// #include "Eigen/Core"


@NoOffset public static class MPCExternal extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MPCExternal(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MPCExternal(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MPCExternal position(long position) {
        return (MPCExternal)super.position(position);
    }
    @Override public MPCExternal getPointer(long i) {
        return new MPCExternal((Pointer)this).offsetAddress(i);
    }

      public MPCExternal() { super((Pointer)null); allocate(); }
      private native void allocate();

      public native void setMatrix_A(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_A(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_A(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);

      public native void setMatrix_B(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_B(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_B(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);

      public native void setMatrix_Q(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_Q(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_Q(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);

      public native void setMatrix_S(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_S(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_S(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);

      public native void setMatrix_R(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_R(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);
      public native void setMatrix_R(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int cols, @Cast("uint32_t") int index);

      public native void setVector_b(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);
      public native void setVector_b(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);
      public native void setVector_b(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);

      public native void setVector_q(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);
      public native void setVector_q(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);
      public native void setVector_q(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);

      public native void setVector_r(DoublePointer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);
      public native void setVector_r(DoubleBuffer array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);
      public native void setVector_r(double[] array, @Cast("uint32_t") int rows, @Cast("uint32_t") int index);

      public native void solveQP();

      public native void setQPSolverSettings();

}

}
