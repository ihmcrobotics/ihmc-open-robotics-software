#ifndef __valkyrie_msgs__msg__AthenaTrajectoryMessage__idl__
#define __valkyrie_msgs__msg__AthenaTrajectoryMessage__idl__

#include "controller_msgs/msg/./JointspaceTrajectoryMessage_.idl"
module valkyrie_msgs
{
  module msg
  {
    module dds
    {
      /**
       * This message is Valkyrie specific and is to be used with an Athena hand (original hand).
       * This message commands the finger controller to move the robot fingers.
       */
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;

      const octet THUMB_MOTOR_ROLL =
      0;

      const octet THUMB_MOTOR_PITCH1 =
      1;

      const octet THUMB_MOTOR_PITCH2 =
      2;

      const octet INDEX_FINGER_MOTOR_PITCH1 =
      3;

      const octet MIDDLE_FINGER_MOTOR_PITCH1 =
      4;

      const octet PINKY_MOTOR_PITCH1 =
      5;


      @TypeCode(type="valkyrie_msgs::msg::dds_::AthenaTrajectoryMessage_")
      struct AthenaTrajectoryMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Specifies the side of the robot that will execute the trajectory.
         */
        @defaultValue(value=255)
        octet robot_side;
        /**
         * Specifies the list of finger motor names that we want to control.
         */
        sequence<octet, 6> finger_motor_names;
        /**
         * The indexing for the joints refers the list of finger motor names.
         */
        controller_msgs::msg::dds::JointspaceTrajectoryMessage jointspace_trajectory;
      };
    };
  };
};

#endif
