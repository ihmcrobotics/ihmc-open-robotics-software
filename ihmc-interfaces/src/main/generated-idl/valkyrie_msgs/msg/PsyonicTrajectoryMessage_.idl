#ifndef __valkyrie_msgs__msg__PsyonicTrajectoryMessage__idl__
#define __valkyrie_msgs__msg__PsyonicTrajectoryMessage__idl__

#include "controller_msgs/msg/./JointspaceTrajectoryMessage_.idl"
module valkyrie_msgs
{
  module msg
  {
    module dds
    {
      /**
       * This message is Valkyrie specific and is to be used with a Psyonic hand.
       * This message commands the finger controller to move the robot fingers.
       */
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;

      const octet THUMB_Q1 =
      0;

      const octet THUMB_Q2 =
      1;

      const octet INDEX_Q1 =
      2;

      const octet INDEX_Q2 =
      3;

      const octet MIDDLE_Q1 =
      4;

      const octet MIDDLE_Q2 =
      5;

      const octet RING_Q1 =
      6;

      const octet RING_Q2 =
      7;

      const octet PINKY_Q1 =
      8;

      const octet PINKY_Q2 =
      9;


      @TypeCode(type="valkyrie_msgs::msg::dds_::PsyonicTrajectoryMessage_")
      struct PsyonicTrajectoryMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Specifies the side of the robot that will execute the trajectory.
         */
        @defaultValue(value=255)
        octet robot_side;
        /**
         * Specifies the list of joints that we want to control.
         */
        sequence<octet, 10> joint_names;
        /**
         * The indexing for the joints refers the list of joint names.
         */
        controller_msgs::msg::dds::JointspaceTrajectoryMessage jointspace_trajectory;
      };
    };
  };
};

#endif
