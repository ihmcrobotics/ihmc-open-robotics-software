#ifndef __behavior_msgs__msg__HandPoseActionDefinitionMessage__idl__
#define __behavior_msgs__msg__HandPoseActionDefinitionMessage__idl__

#include "behavior_msgs/msg/./BehaviorActionDefinitionMessage_.idl"
#include "controller_msgs/msg/./RigidBodyTransformMessage_.idl"
module behavior_msgs
{
  module msg
  {
    module dds
    {

      @TypeCode(type="behavior_msgs::msg::dds_::HandPoseActionDefinitionMessage_")
      struct HandPoseActionDefinitionMessage
      {
        /**
         * Parent definition fields
         */
        behavior_msgs::msg::dds::BehaviorActionDefinitionMessage action_definition;
        /**
         * Specifies the side of the robot that this message refers to.
         */
        @defaultValue(value=255)
        octet robot_side;
        /**
         * Name of the frame the this action is expressed in
         */
        string parent_frame_name;
        /**
         * Transform that expresses the hand pose in the parent frame
         */
        controller_msgs::msg::dds::RigidBodyTransformMessage transform_to_parent;
        /**
         * The trajectory duration
         */
        double trajectory_duration;
        /**
         * Whether the next action can be executed at the same time of this one
         */
        boolean execute_with_next_action;
        /**
         * Whether maintaining the rigid body controlled in world after the action is complete
         */
        boolean hold_pose_in_world;
        /**
         * Whether the rigid body is controlled in jointspace (true) or taskspace (false)
         */
        boolean joint_space_control;
      };
    };
  };
};

#endif
