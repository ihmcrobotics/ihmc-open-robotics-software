#ifndef __toolbox_msgs__msg__VisibilityGraphsParametersPacket__idl__
#define __toolbox_msgs__msg__VisibilityGraphsParametersPacket__idl__

module toolbox_msgs
{
  module msg
  {
    module dds
    {
      const double DEFAULT_NO_VALUE =
      -11.1;


      /**
       * This message is part of the IHMC footstep planning module.
       */
      @TypeCode(type="toolbox_msgs::msg::dds_::VisibilityGraphsParametersPacket_")
      struct VisibilityGraphsParametersPacket
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        @defaultValue(value=-11.1)
        double max_inter_region_connection_length;
        @defaultValue(value=-11.1)
        double normal_z_threshold_for_accessible_regions;
        @defaultValue(value=-11.1)
        double navigable_extrusion_distance;
        @defaultValue(value=-11.1)
        double obstacle_extrusion_distance;
        @defaultValue(value=-11.1)
        double obstacle_extrusion_distance_if_not_too_high_to_step;
        @defaultValue(value=-11.1)
        double too_high_to_step_distance;
        @defaultValue(value=-11.1)
        double height_for_max_avoidance;
        @defaultValue(value=-11.1)
        double cluster_resolution;
        @defaultValue(value=-11.1)
        double exploration_distance_from_start_goal;
        double planar_region_min_area;
        unsigned long planar_region_min_size;
        /**
         * Defines the angle from which two regions are considered orthogonal.
         * It is used to determine if a region should be projected onto another as a polygon or a line.
         * It should be close to 90 degrees.
         * Returns the angle threshold to use to determine if a line or polygon projection method should be used.
         */
        @defaultValue(value=-11.1)
        double region_orthogonal_angle;
        /**
         * This epsilon is is used when searching to which region the start/goal belongs to.
         * A positive value corresponds to growing all the regions before testing if the start/goal is inside.
         * Returns the value of the epsilon to use.
         */
        @defaultValue(value=0.03)
        double search_host_region_epsilon;
        @defaultValue(value=-11.1)
        double can_duck_under_height;
        @defaultValue(value=-11.1)
        double can_easily_step_over_height;
        @defaultValue(value=-11.1)
        double length_for_long_inter_region_edge;
        boolean perform_post_processing_node_shifting;
        @defaultValue(value=True)
        boolean introduce_midpoints_in_post_processing;
        boolean compute_orientations_to_avoid_obstacles;
        @defaultValue(value=-11.1)
        double heuristic_weight;
        @defaultValue(value=-11.1)
        double distance_weight;
        @defaultValue(value=-11.1)
        double elevation_weight;
        @defaultValue(value=-11.1)
        double occluded_goal_edge_weight;
        @defaultValue(value=-11.1)
        double weight_for_inter_region_edge;
        boolean return_best_effort_solution;
        boolean optimize_for_narrow_passage;
      };
    };
  };
};

#endif
