#ifndef __controller_msgs__msg__FootstepPlanningRequestPacket__idl__
#define __controller_msgs__msg__FootstepPlanningRequestPacket__idl__

#include "controller_msgs/msg/./PlanarRegionsListMessage_.idl"
#include "geometry_msgs/msg/./Point_.idl"
#include "geometry_msgs/msg/./Pose_.idl"
#include "geometry_msgs/msg/./Quaternion_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;

      const octet FOOTSTEP_PLANNER_TYPE_PLAN_THEN_SNAP =
      0;

      /**
       * The recommended planner type
       */
      const octet FOOTSTEP_PLANNER_TYPE_A_STAR =
      1;

      const octet FOOTSTEP_PLANNER_TYPE_VIS_GRAPH_WITH_A_STAR =
      2;

      const long NO_PLAN_ID =
      -1;


      /**
       * This message is part of the IHMC footstep planning module.
       */
      @TypeCode(type="controller_msgs::msg::dds_::FootstepPlanningRequestPacket_")
      struct FootstepPlanningRequestPacket
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Initial stance foot side
         */
        @defaultValue(value=255)
        octet initial_stance_robot_side;
        /**
         * Stance foot sole frame z up position, z must be correct
         */
        geometry_msgs::msg::dds::Point stance_foot_position_in_world;
        /**
         * Stance foot sole frame z up orientation, only the "yaw" is considered
         */
        geometry_msgs::msg::dds::Quaternion stance_foot_orientation_in_world;
        /**
         * Goal mid feet z up position
         */
        geometry_msgs::msg::dds::Point goal_position_in_world;
        /**
         * Goal mid feet z up orientation, only the "yaw" is considered
         */
        geometry_msgs::msg::dds::Quaternion goal_orientation_in_world;
        /**
         * Footstep planner type, see above
         */
        @defaultValue(value=255)
        octet requested_footstep_planner_type;
        /**
         * Acceptable xy distance from the given goal for the planner to terminate
         */
        @defaultValue(value=-1.0)
        double goal_distance_proximity;
        /**
         * Acceptable yaw offset from the given goal for the planner to terminate
         */
        @defaultValue(value=-1.0)
        double goal_yaw_proximity;
        /**
         * Timeout in seconds
         */
        double timeout;
        /**
         * Best effort timeout in seconds
         */
        double best_effort_timeout;
        /**
         * Max body path length if using body path
         */
        double horizon_length;
        /**
         * Planar regions to use, if you don't want to assume flat ground
         */
        controller_msgs::msg::dds::PlanarRegionsListMessage planar_regions_list_message;
        /**
         * Explicitly tell the planner to use flat ground
         */
        boolean assume_flat_ground;
        /**
         * Set this id to keep track of your request
         */
        @defaultValue(value=-1)
        long planner_request_id;
        /**
         * Requested body path waypoints. If non-empty, planner will follow this path and will not plan a body path
         */
        sequence<geometry_msgs::msg::dds::Pose, 50> body_path_waypoints;
      };
    };
  };
};

#endif
