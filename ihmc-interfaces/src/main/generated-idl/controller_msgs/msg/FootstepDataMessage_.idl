#ifndef __controller_msgs__msg__FootstepDataMessage__idl__
#define __controller_msgs__msg__FootstepDataMessage__idl__

#include "controller_msgs/msg/./SE3TrajectoryPointMessage_.idl"
#include "geometry_msgs/msg/./Point_.idl"
#include "geometry_msgs/msg/./Quaternion_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;

      const octet TRAJECTORY_TYPE_DEFAULT =
      0;

      const octet TRAJECTORY_TYPE_OBSTACLE_CLEARANCE =
      1;

      const octet TRAJECTORY_TYPE_CUSTOM =
      2;

      const octet TRAJECTORY_TYPE_WAYPOINTS =
      3;


      /**
       * This message is part of the IHMC whole-body controller API.
       * This message specifies the position, orientation and side (left or right) of a desired footstep in world frame.
       */
      @TypeCode(type="controller_msgs::msg::dds_::FootstepDataMessage_")
      struct FootstepDataMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Specifies which foot will swing to reach the footstep.
         */
        @defaultValue(value=255)
        octet robot_side;
        /**
         * Specifies the position of the footstep (sole frame) in world frame.
         */
        geometry_msgs::msg::dds::Point location;
        /**
         * Specifies the orientation of the footstep (sole frame) in world frame.
         */
        geometry_msgs::msg::dds::Quaternion orientation;
        /**
         * Predicted contact points represent the vertices of the expected contact polygon between the foot and the world.
         * An empty list will request the controller to use the default foot support polygon.
         * Contact points  are expressed in sole frame. The ordering does not matter.
         * For example: to tell the controller to use the entire foot, the predicted contact points would be:
         * - x: 0.5 * foot_length, y: -0.5 * toe_width
         * - x: 0.5 * foot_length, y: 0.5 * toe_width
         * - x: -0.5 * foot_length, y: -0.5 * heel_width
         * - x: -0.5 * foot_length, y: 0.5 * heel_width
         * Note: The z coordinate of each point is ignored.
         */
        sequence<geometry_msgs::msg::dds::Point, 10> predicted_contact_points_2d;
        /**
         * This contains information on what the swing trajectory should be for each step. Recommended is TRAJECTORY_TYPE_DEFAULT.
         */
        octet trajectory_type;
        /**
         * Contains information on how high the robot should swing its foot.
         * This affects trajectory types TRAJECTORY_TYPE_DEFAULT and TRAJECTORY_TYPE_OBSTACLE_CLEARANCE.
         * If a value smaller then the minimal swing height is chosen (e.g. 0.0) the swing height will be changed to a default value.
         */
        double swing_height;
        /**
         * In case the trajectory type is set to TRAJECTORY_TYPE_CUSTOM two swing waypoints can be specified here.
         * The waypoints define sole positions.
         * The controller will compute times and velocities at the waypoints.
         * This is a convenient way to shape the trajectory of the swing.
         * If full control over the swing trajectory is desired use the trajectory type TRAJECTORY_TYPE_WAYPOINTS instead.
         * The position waypoints are expected in the trajectory frame.
         */
        sequence<geometry_msgs::msg::dds::Point, 10> custom_position_waypoints;
        /**
         * In case the trajectory type is set to TRAJECTORY_TYPE_WAYPOINTS, swing waypoints can be specified here.
         * The waypoints do not include the start point (which is set to the current foot state at lift-off) and the touch down point
         * (which is specified by the location and orientation fields).
         * All waypoints are for the sole frame and expressed in the trajectory frame.
         * The maximum number of points can be found in the Footstep class.
         */
        sequence<controller_msgs::msg::dds::SE3TrajectoryPointMessage, 10> swing_trajectory;
        /**
         * In case the trajectory type is set to TRAJECTORY_TYPE_WAYPOINTS, this value can be used to specify the trajectory blend duration in seconds.
         * If greater than zero, waypoints that fall within the valid time window (beginning at the start of the swing phase and spanning the desired blend duration)
         * will be adjusted to account for the initial error between the actual and expected position and orientation of the swing foot.
         * Note that the expected_initial_location and expected_initial_orientation fields must be defined in order to enable trajectory blending.
         */
        double swing_trajectory_blend_duration;
        /**
         * The swingDuration is the time a foot is not in ground contact during a step.
         * If the value of this field is invalid (not positive) it will be replaced by a default swing_duration.
         */
        @defaultValue(value=-1.0)
        double swing_duration;
        /**
         * The transferDuration is the time spent with the feet in ground contact before a step.
         * If the value of this field is invalid (not positive) it will be replaced by a default transfer_duration.
         */
        @defaultValue(value=-1.0)
        double transfer_duration;
        /**
         * (Experimental) The touchdown duration is the time spent trying to do a soft touchdown.
         * If the value of this field is invalid (not positive) it will be replaced by a default transfer_duration.
         * If the default is set to zero, the touchdown state will be disabled.
         */
        @defaultValue(value=-1.0)
        double touchdown_duration;
        /**
         * The time to delay this command on the controller side before being executed.
         */
        double execution_delay_time;
      };
    };
  };
};

#endif
