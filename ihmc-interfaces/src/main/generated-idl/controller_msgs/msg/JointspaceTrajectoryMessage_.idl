#ifndef __controller_msgs__msg__JointspaceTrajectoryMessage__idl__
#define __controller_msgs__msg__JointspaceTrajectoryMessage__idl__

#include "controller_msgs/msg/./OneDoFJointTrajectoryMessage_.idl"
#include "controller_msgs/msg/./QueueableMessage_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {

      /**
       * This message is part of the IHMC whole-body controller API.
       * General purpose message that holds onto information to execute a trajectory in jointspace.
       * A third order polynomial function is used to interpolate between trajectory points.
       * The joint_trajectory_messages can have different waypoint times and different number of waypoints.
       * If a joint trajectory message is empty, the controller will hold the last desired joint position while executing the other joint trajectories.
       */
      @TypeCode(type="controller_msgs::msg::dds_::JointspaceTrajectoryMessage_")
      struct JointspaceTrajectoryMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Trajectory for each.
         */
        sequence<controller_msgs::msg::dds::OneDoFJointTrajectoryMessage> joint_trajectory_messages;
        /**
         * Properties for queueing trajectories.
         */
        controller_msgs::msg::dds::QueueableMessage queueing_properties;
      };
    };
  };
};

#endif
