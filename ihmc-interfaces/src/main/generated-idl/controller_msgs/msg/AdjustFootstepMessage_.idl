#ifndef __controller_msgs__msg__AdjustFootstepMessage__idl__
#define __controller_msgs__msg__AdjustFootstepMessage__idl__

#include "geometry_msgs/msg/./Point_.idl"
#include "geometry_msgs/msg/./Quaternion_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;


      /**
       * This message is part of the IHMC whole-body controller API.
       * The intent of this message is to adjust a footstep when the robot is executing it
       * (a foot is currently swinging to reach the footstep to be adjusted).
       */
      @TypeCode(type="controller_msgs::msg::dds_::AdjustFootstepMessage_")
      struct AdjustFootstepMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Specifies which foot is expected to be executing the footstep to be adjusted.
         */
        @defaultValue(value=255)
        octet robot_side;
        /**
         * Specifies the adjusted position of the footstep. It is expressed in world frame.
         */
        geometry_msgs::msg::dds::Point location;
        /**
         * Specifies the adjusted orientation of the footstep. It is expressed in world frame.
         */
        geometry_msgs::msg::dds::Quaternion orientation;
        /**
         * Predicted contact points represent the vertices of the expected contact polygon between the foot and the world.
         * An empty list will request the controller to use the default foot support polygon.
         * Contact points  are expressed in sole frame. The ordering does not matter.
         * For example: to tell the controller to use the entire foot, the predicted contact points would be:
         * - x: 0.5 * foot_length, y: -0.5 * toe_width
         * - x: 0.5 * foot_length, y: 0.5 * toe_width
         * - x: -0.5 * foot_length, y: -0.5 * heel_width
         * - x: -0.5 * foot_length, y: 0.5 * heel_width
         * Note: The z coordinate of each point is ignored.
         */
        sequence<geometry_msgs::msg::dds::Point> predicted_contact_points_2d;
        /**
         * The time to delay this command on the controller side before being executed.
         */
        double execution_delay_time;
      };
    };
  };
};

#endif
