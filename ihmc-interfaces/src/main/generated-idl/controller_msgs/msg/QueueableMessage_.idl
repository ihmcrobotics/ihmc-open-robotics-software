#ifndef __controller_msgs__msg__QueueableMessage__idl__
#define __controller_msgs__msg__QueueableMessage__idl__

module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet EXECUTION_MODE_OVERRIDE =
      0;

      const octet EXECUTION_MODE_QUEUE =
      1;


      /**
       * This message is part of the IHMC whole-body controller API.
       * General message carrying the information needed to safely queue messages.
       */
      @TypeCode(type="controller_msgs::msg::dds_::QueueableMessage_")
      struct QueueableMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * When EXECUTION_MODE_OVERRIDE is chosen:
         * - For trajectory messages: the time of the first trajectory point can be zero, in which case the controller will start directly at the first trajectory point.
         * Otherwise the controller will prepend a first trajectory point at the current desired position.
         * When EXECUTION_MODE_QUEUE is chosen:
         * - The message must carry the ID of the message it should be queued to.
         * - The very first message of a list of queued messages has to be an EXECUTION_MODE_OVERRIDE message.
         * - For trajectory messages:
         * - the trajectory point times are relative to the the last trajectory point time of the previous message.
         * - the time of the first trajectory point has to be greater than zero.
         * - When joint-space trajectory: the controller will queue the joint trajectory messages as a per joint basis.
         */
        octet execution_mode;
        /**
         * Defines a unique ID for this message. Only needed when you want to queue another message to this message.
         */
        @defaultValue(value=-1)
        long long message_id;
        /**
         * Only needed when using EXECUTION_MODE_QUEUE mode, it refers to the message_id to which this message should be queued to.
         * It is used by the controller to ensure that no message has been lost on the way.
         * If a message appears to be missing (previous_message_id different from the last message_id received by the controller), the motion is aborted.
         */
        long long previous_message_id;
        /**
         * The time to delay this message on the controller side before being executed.
         */
        double execution_delay_time;
      };
    };
  };
};

#endif
