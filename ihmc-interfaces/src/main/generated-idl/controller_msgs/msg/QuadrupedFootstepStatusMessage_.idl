#ifndef __controller_msgs__msg__QuadrupedFootstepStatusMessage__idl__
#define __controller_msgs__msg__QuadrupedFootstepStatusMessage__idl__

#include "controller_msgs/msg/./TimeIntervalMessage_.idl"
#include "geometry_msgs/msg/./Point_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet FOOTSTEP_STATUS_STARTED =
      0;

      const octet FOOTSTEP_STATUS_COMPLETED =
      1;

      const octet FRONT_LEFT =
      0;

      const octet FRONT_RIGHT =
      1;

      const octet HIND_RIGHT =
      2;

      const octet HIND_LEFT =
      3;


      /**
       * This message is part of the IHMC whole-body controller API.
       * This message gives the status of the current footstep from the quadruped controller as well as the position of the footstep in world coordinates.
       */
      @TypeCode(type="controller_msgs::msg::dds_::QuadrupedFootstepStatusMessage_")
      struct QuadrupedFootstepStatusMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * The current footstep status enum value.
         */
        @defaultValue(value=255)
        octet footstep_status;
        /**
         * footstep_index starts at 0 and monotonically increases during a controller session
         */
        long footstep_quadrant;
        /**
         * The robot quadrant that this footstep status correlates to.
         */
        @defaultValue(value=255)
        octet robot_quadrant;
        /**
         * Specifies the desired position of the foot sent to the controller as opposed to where the foot actually landed.
         */
        geometry_msgs::msg::dds::Point desired_touchdown_position_in_world;
        /**
         * Specifies the position of where the foot actually landed, only valid when the status is FOOTSTEP_STATUS_COMPLETED
         */
        geometry_msgs::msg::dds::Point actual_touchdown_position_in_world;
        /**
         * Specifies the desired timing of the step
         */
        controller_msgs::msg::dds::TimeIntervalMessage desired_step_interval;
        /**
         * Specifies the achieved timing of the step, the end time is only valid when the status is FOOTSTEP_STATUS_COMPLETED
         */
        controller_msgs::msg::dds::TimeIntervalMessage actual_step_interval;
      };
    };
  };
};

#endif
