#ifndef __controller_msgs__msg__LegCompliancePacket__idl__
#define __controller_msgs__msg__LegCompliancePacket__idl__

module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;


      /**
       * Atlas specific message.
       * This packet controls the stiffness of LegJoints. i.e., the maximum force a joint puts out when it
       * is (pushed) away from a desired position. This is useful to prevent robot from falling when leg
       * hit things unexpectedly. However, low stiffness (high compliance) can lead to poor joint tracking
       * in the presence of natural joint stiction. Finding a good balance is application specific. In our
       * hybrid velocity+force controller, most force comes from velocity control, therefore, only
       * parameter related to velocity control is exposed.
       */
      @TypeCode(type="controller_msgs::msg::dds_::LegCompliancePacket_")
      struct LegCompliancePacket
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * maximum allowed force (ratio) from velocity control in the range of [0.0, 1.0]. 1.0 is the
         * maximum stiffness (default) value tuned for fast walking, 0.0 refers to zero velocity control
         * making the joint very compliant (only force control) but often bad tracking. On Atlas, 0.1-0.3
         * gives decent tracking for slow motion and yet still compliant. The numbers in the array
         * correspond to joints HPZ, HPX, HPY, KNY, AKY, AKX, respectively.
         */
        sequence<float> max_velocity_deltas;
        @defaultValue(value=255)
        octet robot_side;
      };
    };
  };
};

#endif
