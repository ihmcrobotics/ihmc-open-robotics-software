#ifndef __controller_msgs__msg__KinematicsToolboxRigidBodyMessage__idl__
#define __controller_msgs__msg__KinematicsToolboxRigidBodyMessage__idl__

#include "controller_msgs/msg/./SelectionMatrix3DMessage_.idl"
#include "controller_msgs/msg/./WeightMatrix3DMessage_.idl"
#include "geometry_msgs/msg/./Point_.idl"
#include "geometry_msgs/msg/./Quaternion_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {

      /**
       * This message is part of the IHMC hole-body inverse kinematics module.
       * This message contains all the information needed to configure the objectives/constraints to apply on
       * a given end-effector in the solver.
       */
      @TypeCode(type="controller_msgs::msg::dds_::KinematicsToolboxRigidBodyMessage_")
      struct KinematicsToolboxRigidBodyMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * The is the unique hash code of the end-effector to be solved for.
         * It is used on the solver side to retrieve the desired end-effector to be controlled.
         * See RigidBody.getNameBasedHashCode() for the computation of a rigid-body hash code.
         */
        long long end_effector_name_based_hash_code;
        /**
         * This is the desired position of the control frame's origin.
         * If the control frame has not been defined, it represents the desired position endEffector.getBodyFixedFrame().
         * The data is assumed to be expressed in world frame.
         */
        geometry_msgs::msg::dds::Point desired_position_in_world;
        /**
         * This is the desired orientation of the control frame.
         * I the control frame has not been defined, it represents the desired orientation of endEffector.getBodyFixedFrame().
         * The data is assumed to be expressed in world frame.
         */
        geometry_msgs::msg::dds::Quaternion desired_orientation_in_world;
        /**
         * This is the position of the control frame's origin expressed in endEffector.getBodyFixedFrame().
         * By default, the control frame is coincident to endEffector.getBodyFixedFrame().
         * The control frame is rigidly attached to the end-effector.
         */
        geometry_msgs::msg::dds::Point control_frame_position_in_end_effector;
        /**
         * This is the orientation of the control frame expressed in endEffector.getBodyFixedFrame().
         * By default, the control frame is coincident to endEffector.getBodyFixedFrame().
         */
        geometry_msgs::msg::dds::Quaternion control_frame_orientation_in_end_effector;
        /**
         * The selection matrix is used to determinate which degree of freedom of the end-effector should
         * be controlled.
         * The selection frames coming along with the given selection matrix are used to determine to
         * what reference frame the selected axes are referring to. For instance, if only the hand height
         * in world should be controlled on the linear z component of the selection matrix should be
         * selected and the reference frame should be world frame. When no reference frame is provided
         * with the selection matrix, it will be used as it is in the control frame, i.e. the body-fixed
         * frame if not defined otherwise.
         */
        controller_msgs::msg::dds::SelectionMatrix3DMessage angular_selection_matrix;
        /**
         * The selection matrix is used to determinate which degree of freedom of the end-effector should
         * be controlled.
         * The selection frames coming along with the given selection matrix are used to determine to
         * what reference frame the selected axes are referring to. For instance, if only the hand height
         * in world should be controlled on the linear z component of the selection matrix should be
         * selected and the reference frame should be world frame. When no reference frame is provided
         * with the selection matrix, it will be used as it is in the control frame, i.e. the body-fixed
         * frame if not defined otherwise.
         */
        controller_msgs::msg::dds::SelectionMatrix3DMessage linear_selection_matrix;
        /**
         * Weight matrix used to define the priority of controlling the rotation around each axis on the solver side.
         */
        controller_msgs::msg::dds::WeightMatrix3DMessage angular_weight_matrix;
        /**
         * Weight matrix used to define the priority of controlling the translation around each axis on the solver side.
         */
        controller_msgs::msg::dds::WeightMatrix3DMessage linear_weight_matrix;
      };
    };
  };
};

#endif
