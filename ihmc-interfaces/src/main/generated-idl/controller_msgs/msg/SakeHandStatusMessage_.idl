#ifndef __controller_msgs__msg__SakeHandStatusMessage__idl__
#define __controller_msgs__msg__SakeHandStatusMessage__idl__

module controller_msgs
{
  module msg
  {
    module dds
    {
      const octet ROBOT_SIDE_LEFT =
      0;

      const octet ROBOT_SIDE_RIGHT =
      1;


      /**
       * Message used to report the current joint angles for the fingers of the sake gripper.
       */
      @TypeCode(type="controller_msgs::msg::dds_::SakeHandStatusMessage_")
      struct SakeHandStatusMessage
      {
        /**
         * Specifies the side of the robot of the hand being referred to
         */
        @defaultValue(value=255)
        octet robot_side;
        /**
         * Angle at which the hand is closed, in radians
         */
        double position_upper_limit;
        /**
         * Angle at which the hand is fully open, in radians
         */
        double position_lower_limit;
        /**
         * Temperature of the Dynamixel in Celsius
         */
        long temperature;
        /**
         * The current dynamixel position, in radians
         */
        double current_position;
        /**
         * The current dynamixel torque
         * 0: dynamixel will not apply any force and will not achieve desired position
         * 300: A reasonable normal value
         * 1023: dynamixel max torque which will quickly overheat the motor
         */
        long raw_current_torque;
        /**
         * The position the Dynamixel is trying to achieve, in radians
         */
        double desired_position_status;
        /**
         * Torque limit set on the Dynamixel
         */
        double raw_torque_limit_status;
        boolean torque_on_status;
        /**
         * Rotation velocity of the Dynamixel, in rad/s
         * Positive = opening hand (CCW rotation)
         * Negative = closing hand (CW rotation)
         */
        double current_velocity;
        /**
         * Dynamixel's error codes
         * See: https://emanual.robotis.com/docs/en/dxl/protocol1/#error
         */
        long error_codes;
        /**
         * Realtime tick of the Dynamixel
         * If this value isn't changing, communication with the hand is broken
         */
        long realtime_tick;
        boolean is_calibrated;
        boolean needs_reset;
      };
    };
  };
};

#endif
