#ifndef __perception_msgs__msg__LidarScanMessage__idl__
#define __perception_msgs__msg__LidarScanMessage__idl__

#include "geometry_msgs/msg/./Point_.idl"
#include "geometry_msgs/msg/./Quaternion_.idl"
module perception_msgs
{
  module msg
  {
    module dds
    {

      /**
       * This message should disappear to be replaced by ROS equivalent.
       */
      @TypeCode(type="perception_msgs::msg::dds_::LidarScanMessage_")
      struct LidarScanMessage
      {
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        long long robot_timestamp;
        geometry_msgs::msg::dds::Point lidar_position;
        geometry_msgs::msg::dds::Quaternion lidar_orientation;
        /**
         * There are two types of confidence value noticing the quality of the data for sensor pose and point cloud.
         * The range of confidence is from 0.0 with the worst quality to 1.0 with the best quality.
         * The confidence of the sensor pose represents the quality of the pose estimation.
         */
        @defaultValue(value=1.0)
        double sensor_pose_confidence;
        /**
         * There are two types of confidence value noticing the quality of the data for sensor pose and point cloud.
         * The range of confidence is from 0.0 with the worst quality to 1.0 with the best quality.
         * The confidence of the point cloud represents the quality of the collected point cloud data.
         */
        @defaultValue(value=1.0)
        double point_cloud_confidence;
        /**
         * Number of points in the pointcloud
         */
        long number_of_points;
        /**
         * Compressed pointcloud data. See us.ihmc.communication.packets.LidarPointCloudCompression for method to compress and decompress
         */
        sequence<octet, 2000000> scan;
      };
    };
  };
};

#endif
